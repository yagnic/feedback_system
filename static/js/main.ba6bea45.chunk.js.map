{"version":3,"sources":["App.js","index.js"],"names":["App","currentUsername","setCurrentUsername","useState","questions","setQuestions","userRole","setUserRole","selectedQuestionId","setSelectedQuestionId","newQuestionText","setNewQuestionText","feedbackText","setFeedbackText","difficulty","setDifficulty","approvalStatus","setApprovalStatus","loginError","setLoginError","registerMessage","setRegisterMessage","users","setUsers","selectedUserId","setSelectedUserId","assignMessage","setAssignMessage","questionStart","setQuestionStart","questionEnd","setQuestionEnd","useEffect","console","log","axios","get","headers","Content-Type","then","response","data","catch","error","handleLogin","username","password","post","message","role","React","createElement","className","onChange","e","target","value","user_id","fetchUserId","warn","map","user","key","id","type","parseInt","onClick","handleAssignQuestions","question_start","question_end","handleLogout","event","questionId","selectedQuestion","find","q","new_question","feedback","approved","disabled","question","old_question","rows","handleEditQuestion","question_id","editor","approval_status","prevQuestions","updated","filter","placeholder","document","getElementById","arguments","length","undefined","handleRegister","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ba6bea45.chunk.js","sourcesContent":["// React JS implementation of the Question Feedback System using Bootstrap for styling\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport './styles.css';\n\nexport default function App() {\n    const [currentUsername, setCurrentUsername] = useState(null);\n    const [questions, setQuestions] = useState([]);\n    const [userRole, setUserRole] = useState(null);  // User role to determine if admin or regular user\n    const [selectedQuestionId, setSelectedQuestionId] = useState(null);\n    const [newQuestionText, setNewQuestionText] = useState(\"\");\n    const [feedbackText, setFeedbackText] = useState(\"\");\n    const [difficulty, setDifficulty] = useState(\"Easy\");\n    const [approvalStatus, setApprovalStatus] = useState(\"pending\");\n    const [loginError, setLoginError] = useState(\"\");\n    const [registerMessage, setRegisterMessage] = useState(\"\");\n    const [users, setUsers] = useState([]);  // List of users for admin to assign questions\n    const [selectedUserId, setSelectedUserId] = useState(null);\n    const [assignMessage, setAssignMessage] = useState(\"\");  // Message to display after assigning questions\n    const [questionStart, setQuestionStart] = useState(1);\n    const [questionEnd, setQuestionEnd] = useState(5);\n\n    useEffect(() => {\n        if (currentUsername) {\n            console.log('Fetching questions for:', currentUsername);\n            axios.get(`http://127.0.0.1:5000/questions/${currentUsername}`, { headers: { 'Content-Type': 'application/json' } })\n                .then(response => {\n                    console.log('Questions fetched successfully:', response.data);\n                    setQuestions(response.data);\n                })\n                .catch(error => {\n                    console.error('Error fetching questions:', error);\n                });\n        }\n    }, [currentUsername, userRole]);\n\n    useEffect(() => {\n        if (userRole === 'admin') {\n            console.log('Fetching users for admin');\n            axios.get('http://127.0.0.1:5000/users', { headers: { 'Content-Type': 'application/json' } })\n                .then(response => {\n                    console.log('Users fetched successfully:', response.data);\n                    setUsers(response.data);\n                })\n                .catch(error => {\n                    console.error('Error fetching users:', error);\n                });\n        }\n    }, [userRole]);\n\n    const fetchUserId = (username) => {\n        console.log('Fetching user ID for username:', username);\n        axios.get(`http://127.0.0.1:5000/user-id/${username}`, { headers: { 'Content-Type': 'application/json' } })\n            .then(response => {\n                console.log('User ID fetched successfully for username:', username, 'User ID:', response.data.user_id);\n                setSelectedUserId(response.data.user_id);\n            })\n            .catch(error => {\n                console.error('Error fetching user ID for username:', username, error);\n            });\n    };\n\n    const handleLogin = (username, password) => {\n        if (username && password) {\n            console.log('Attempting login for:', username);\n            axios.post('http://127.0.0.1:5000/login', { username, password }, { headers: { 'Content-Type': 'application/json' } })\n                .then(response => {\n                    if (response.data.message === 'Login successful') {\n                        console.log('Login successful for:', username);\n                        setCurrentUsername(username);\n                        setUserRole(response.data.role);\n                        setLoginError(\"\");\n                    } else {\n                        setLoginError('Invalid username or password');\n                    }\n                })\n                .catch(error => {\n                    setLoginError('Invalid username or password');\n                    console.error('Login error:', error);\n                });\n        } else {\n            setLoginError('Please fill in all fields');\n        }\n    };\n\n    const handleRegister = (username, password, role = 'teacher') => {\n        if (username && password) {\n            console.log('Attempting registration for:', username);\n            axios.post('http://127.0.0.1:5000/register', { username, password, role }, { headers: { 'Content-Type': 'application/json' } })\n                .then(response => {\n                    console.log('Registration successful for:', username);\n                    setRegisterMessage('User registered successfully. You can now log in.');\n                    setLoginError('');\n                })\n                .catch(error => {\n                    setRegisterMessage('Registration failed: Username may already exist');\n                    setLoginError('');\n                    console.error('Registration error:', error);\n                });\n        } else {\n            setRegisterMessage('Please fill in all fields');\n            setLoginError('');\n        }\n    };\n\n    const handleAssignQuestions = () => {\n        if (selectedUserId && questionStart > 0 && questionEnd >= questionStart) {\n            console.log('Assigning questions:', { selectedUserId, questionStart, questionEnd });\n            try {\n                axios.post('http://127.0.0.1:5000/assign-questions', {\n                    user_id: selectedUserId,\n                    question_start: questionStart,\n                    question_end: questionEnd\n                }, { headers: { 'Content-Type': 'application/json' } })\n                    .then(response => {\n                        console.log('Questions assigned successfully:', response.data);\n                        setAssignMessage('Questions assigned successfully.');\n                    })\n                    .catch(error => {\n                        setAssignMessage('Error assigning questions. Please try again.');\n                        console.error('Error assigning questions:', error);\n                    });\n            } catch (error) {\n                console.error('Unexpected error while assigning questions:', error);\n            }\n        } else {\n            console.warn('Invalid input for assigning questions:', { selectedUserId, questionStart, questionEnd });\n            setAssignMessage('Please select a user and provide a valid range of questions (start and end must be greater than 0, and start must be less than or equal to end).');\n        }\n    };\n\n    const handleLogout = () => {\n        console.log('User logged out:', currentUsername);\n        setCurrentUsername(null);\n        setLoginError('');\n        setRegisterMessage('');\n        setUserRole(null);\n        setAssignMessage('');\n        setQuestions([]);\n    };\n\n    const handleSelectQuestion = (event) => {\n        const questionId = parseInt(event.target.value);\n        console.log('Question selected:', questionId);\n        setSelectedQuestionId(questionId);\n        // Reset editing fields when a new question is selected\n        const selectedQuestion = questions.find(q => q.id === questionId);\n        if (selectedQuestion) {\n            setNewQuestionText(selectedQuestion.new_question || \"\");\n            setFeedbackText(selectedQuestion.feedback || \"\");\n            setDifficulty(selectedQuestion.difficulty || \"Easy\");\n            setApprovalStatus(selectedQuestion.approved ? 'approved' : 'pending');\n        }\n    };\n\n    const handleEditQuestion = () => {\n        if (selectedQuestionId && newQuestionText) {\n            console.log('Editing question:', selectedQuestionId);\n            axios.post('http://127.0.0.1:5000/questions/edit', {\n                question_id: selectedQuestionId,\n                new_question: newQuestionText,\n                editor: currentUsername,\n                difficulty,\n                feedback: feedbackText,\n                approval_status: approvalStatus\n            }, { headers: { 'Content-Type': 'application/json' } })\n                .then(response => {\n                    console.log('Question edited successfully:', response.data);\n                    setQuestions(prevQuestions =>\n                        prevQuestions.map(question =>\n                            question.id === selectedQuestionId\n                                ? { ...question, new_question: newQuestionText, updated: true, approved: approvalStatus === 'approved', editor: currentUsername, difficulty, feedback: feedbackText }\n                                : question\n                        )\n                    );\n                    setNewQuestionText(\"\");\n                    setFeedbackText(\"\");\n                    setDifficulty(\"Easy\");\n                    setApprovalStatus(\"pending\");\n                })\n                .catch(error => {\n                    console.error('Error editing question:', error);\n                });\n        } else {\n            console.warn('Please provide the new question text to save changes.');\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            {!currentUsername ? (\n                <div className=\"row\">\n                    <div className=\"col-md-4 offset-md-4 mt-5\">\n                        <div className=\"card p-4\">\n                            <h2 className=\"text-center\">Teacher Login</h2>\n                            <div className=\"mb-3\">\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Username\" id=\"username\" />\n                            </div>\n                            <div className=\"mb-3\">\n                                <input type=\"password\" className=\"form-control\" placeholder=\"Password\" id=\"password\" />\n                            </div>\n                            <button className=\"btn btn-primary w-100\" onClick={() => handleLogin(document.getElementById('username').value, document.getElementById('password').value)}>Login as Teacher</button>\n                            {loginError && <p className=\"text-danger mt-2 text-center\">{loginError}</p>}\n                        </div>\n                    </div>\n\n                    <div className=\"col-md-4 offset-md-4 mt-3\">\n                        <div className=\"card p-4\">\n                            <h2 className=\"text-center\">Admin Login</h2>\n                            <div className=\"mb-3\">\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Admin Username\" id=\"admin-username\" />\n                            </div>\n                            <div className=\"mb-3\">\n                                <input type=\"password\" className=\"form-control\" placeholder=\"Password\" id=\"admin-password\" />\n                            </div>\n                            <button className=\"btn btn-danger w-100\" onClick={() => handleLogin(document.getElementById('admin-username').value, document.getElementById('admin-password').value)}>Login as Admin</button>\n                            {loginError && <p className=\"text-danger mt-2 text-center\">{loginError}</p>}\n                        </div>\n                    </div>\n\n                    <div className=\"col-md-4 offset-md-4 mt-3\">\n                        <div className=\"card p-4\">\n                            <h2 className=\"text-center\">Register as Teacher</h2>\n                            <div className=\"mb-3\">\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Username\" id=\"register-username\" />\n                            </div>\n                            <div className=\"mb-3\">\n                                <input type=\"password\" className=\"form-control\" placeholder=\"Password\" id=\"register-password\" />\n                            </div>\n                            <button className=\"btn btn-success w-100\" onClick={() => handleRegister(document.getElementById('register-username').value, document.getElementById('register-password').value, 'teacher')}>Register as Teacher</button>\n                            {registerMessage && <p className=\"text-success mt-2 text-center\">{registerMessage}</p>}\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <div className=\"dashboard\">\n                    {userRole === 'admin' && (\n                        <div className=\"admin-panel mt-5\">\n                            <h3>Admin Panel</h3>\n                            <div className=\"card p-4\">\n                                <h4>Assign Questions to Teachers</h4>\n                                <div className=\"mb-3\">\n                                    <select className=\"form-select\" onChange={(e) => {\n            const username = e.target.value;\n            console.log('Selected teacher username:', username);\n            if (username) {\n                fetchUserId(username);\n            } else {\n                console.warn('No teacher selected');\n            }\n        }}>\n                                        <option value=\"\" >Select a teacher</option>\n                                        {users.map(user => (\n                                            <option key={user.id} value={user.username}>{user.username}</option>\n                                        ))}\n                                    </select>\n                                </div>\n                                <div className=\"mb-3\">\n                                    <label>Question Start:</label>\n                                    <input type=\"number\" className=\"form-control\" value={questionStart} onChange={(e) => setQuestionStart(parseInt(e.target.value))} />\n                                </div>\n                                <div className=\"mb-3\">\n                                    <label>Question End:</label>\n                                    <input type=\"number\" className=\"form-control\" value={questionEnd} onChange={(e) => setQuestionEnd(parseInt(e.target.value))} />\n                                </div>\n                                <button className=\"btn btn-success\" onClick={() => handleAssignQuestions()}>Assign Questions</button>\n                                {assignMessage && <p className=\"mt-2 text-center text-info\">{assignMessage}</p>}\n                            </div>\n                        </div>\n                    )}\n\n                    <h2 className=\"mt-5\">Welcome, {currentUsername}</h2>\n                    <button className=\"btn btn-warning mt-3\" onClick={handleLogout}>Logout</button>\n                    <div className=\"question-section mt-5\">\n                        <h3>Question Feedback Page</h3>\n                        <select onChange={handleSelectQuestion} value={selectedQuestionId || \"\"} className=\"form-select mb-4\">\n                            <option value=\"\" disabled>Select a question</option>\n                            {questions.map((question) => (\n                                <option key={question.id} value={question.id}>Question {question.id}</option>\n                            ))}\n                        </select>\n                        {selectedQuestionId !== null && (\n                            <div className=\"question-details card p-4 mb-4\">\n                                <div className=\"mb-3\">\n                                    <h4>Old Question:</h4>\n                                    <p>{questions.find(q => q.id === selectedQuestionId).old_question}</p>\n                                </div>\n                                <div className=\"mb-3\">\n                                    <h4>New Question:</h4>\n                                    <p>{questions.find(q => q.id === selectedQuestionId).new_question || \"Not edited yet\"}</p>\n                                </div>\n                                <div className=\"mb-3\">\n                                    <h4>Edit Question:</h4>\n                                    <textarea value={newQuestionText} onChange={(e) => setNewQuestionText(e.target.value)} className=\"form-control mb-3\" rows=\"3\"></textarea>\n                                </div>\n                                <div className=\"mb-3\">\n                                    <h4>Difficulty Level:</h4>\n                                    <select value={difficulty} onChange={(e) => setDifficulty(e.target.value)} className=\"form-select mb-3\">\n                                        <option value=\"Easy\">Easy</option>\n                                        <option value=\"Medium\">Medium</option>\n                                        <option value=\"Hard\">Hard</option>\n                                    </select>\n                                </div>\n                                <div className=\"mb-3\">\n                                    <h4>Provide Your Feedback:</h4>\n                                    <textarea value={feedbackText} onChange={(e) => setFeedbackText(e.target.value)} className=\"form-control mb-3\" rows=\"4\"></textarea>\n                                </div>\n                                <div className=\"mb-3\">\n                                    <h4>Approval Status:</h4>\n                                    <select value={approvalStatus} onChange={(e) => setApprovalStatus(e.target.value)} className=\"form-select mb-3\">\n                                        <option value=\"pending\">Pending</option>\n                                        <option value=\"approved\">Approved</option>\n                                        <option value=\"disapproved\">Disapproved</option>\n                                    </select>\n                                </div>\n                                <button className=\"btn btn-primary\" onClick={handleEditQuestion}>Save Changes</button>\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"feedback-summary\">\n                        <h3>Approved Feedbacks</h3>\n                        {questions.filter(q => q.approved).map((question) => (\n                            <div key={question.id} className=\"card p-3 mb-3\">\n                                <p>Question {question.id} - Feedback: {question.feedback} (Approved)</p>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}